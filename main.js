/*
Ersatt typografiska tecken
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CitationsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var CitationsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Loading Citations plugin");
    this.addCommand({
      id: "ersatt-typografiska tecken",
      name: "Ers\xE4tt typografiska tecken",
      editorCallback: (editor, view) => {
        this.citationsPlugin(editor);
      }
    });
    if (!import_obsidian.Platform.isMobile) {
      const ribbonIconEl = this.addRibbonIcon("quote-glyph", "Ers\xE4tt typografiska tecken", (evt) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view) {
          this.citationsPlugin(view.editor);
        }
      });
      ribbonIconEl.addClass("my-plugin-ribbon-class");
    }
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Ers\xE4tt typografiska tecken").setIcon("quote-glyph").onClick(() => {
            const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
            if (view) {
              this.citationsPlugin(view.editor);
            }
          });
        });
      })
    );
    if (!import_obsidian.Platform.isMobile) {
      const statusBarItemEl = this.addStatusBarItem();
      statusBarItemEl.setText("Status Bar Text");
    }
    this.addSettingTab(new SampleSettingTab(this.app, this));
    if (!import_obsidian.Platform.isMobile) {
      this.registerDomEvent(document, "click", (evt) => {
        console.log("click", evt);
      });
    }
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  citationsPlugin(editor) {
    const text = editor.getValue();
    let nyText = text;
    nyText = nyText.replace(/,\u0027\u0027/g, "\u201D,");
    nyText = nyText.replace(/,\u0022/g, "\u201D,");
    nyText = nyText.replace(/\u0027\u0027/g, "\u201D");
    nyText = nyText.replace(/\u0027/g, "\u2019");
    nyText = nyText.replace(/\u0022/g, "\u201D");
    nyText = nyText.replace(/,\u201D/g, "\u201D,");
    nyText = nyText.replace(/\u201C/g, "\u201D");
    if (text !== nyText) {
      editor.setValue(nyText);
    } else {
      new import_obsidian.Notice("Inga ers\xE4ttningar beh\xF6vdes.");
    }
  }
  onunload() {
    console.log("Avlastar Citations Plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("Change citations").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
